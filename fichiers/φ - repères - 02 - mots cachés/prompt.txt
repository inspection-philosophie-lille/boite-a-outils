Pour g√©n√©rer un fichier HTML comme celui fourni, avec toutes les fonctionnalit√©s sp√©cifi√©es (grille de mots cach√©s, boutons align√©s diff√©remment selon desktop/mobile, largeur des boutons bas√©e sur le mot le plus long en desktop et la grille en mobile, espacement r√©duit des cellules en mobile, etc.), voici un prompt d√©taill√© et structur√© que vous pourriez utiliser pour une IA comme moi (Grok) ou un autre mod√®le de g√©n√©ration de code. Le prompt est con√ßu pour √™tre clair, complet et pr√©cis, tout en √©vitant toute mention directe du code existant pour se concentrer sur les exigences fonctionnelles et visuelles.
Prompt pour g√©n√©rer le fichier HTML

Objectif : Cr√©ez un fichier HTML avec CSS et JavaScript pour une application de mots cach√©s (word search puzzle) interactive, respectant les contraintes suivantes pour desktop (>768px) et mobile (‚â§768px).
Exigences g√©n√©rales

    Structure de la page :
        Une page HTML avec un <header> contenant :
            Un titre <h1> : "mots cach√©s" (minuscules, rouge).
            Un sous-titre <h2> : "rep√©rer les rep√®res" (minuscules, noir).
        Un conteneur principal (.main-container) avec :
            Un conteneur de contr√¥les (.controls-container) contenant un <select> pour choisir la taille de la grille (8x8, 10x10, 15x15) et un bouton "Recharger".
            Un conteneur (.container) pour la grille (.grid) et la liste des mots (.words-list).
        Une modale (.congrats-modal) affich√©e lorsque tous les mots sont trouv√©s, avec un message "F√©licitations ! üéâ", un texte "Vous avez trouv√© tous les mots !", et un bouton "Fermer".
        Inclure un fichier externe reperes.js (situ√© dans ../../src/reperes.js) contenant une liste de mots dans une structure comme :
        javascript

        const reperes = [{ parts: [{ name: "CHAT" }, { name: "CHIEN" }, ...] }];
        Si reperes.js √©choue, utiliser une liste par d√©faut : ["TEST", "JEU", "MOT", "GRILLE", "ALEATOIRE", "PUZZLE", "JOUER", "TROUVER", "CACHE", "LETTRE"].
    Fonctionnalit√©s de la grille :
        La grille (.grid) est un tableau de cellules (.cell) g√©n√©r√© dynamiquement (8x8, 10x10, ou 15x15 selon le <select>).
        Chaque cellule contient une lettre (majuscule, centr√©e, police Arial, gras).
        Les mots (filtr√©s : longueur ‚â• 4 et ‚â§ taille de la grille) sont plac√©s al√©atoirement dans 8 directions (haut, bas, gauche, droite, diagonales).
        Les cellules vides sont remplies avec des lettres al√©atoires (A-Z).
        Les utilisateurs peuvent s√©lectionner un mot en cliquant/touchant deux cellules (d√©but et fin). Si le mot est valide, il est surlign√© (.cell.highlighted) et barr√© dans la liste des mots (.words-list span.crossed-out).
        La grille est centr√©e dans .container avec margin: 0 auto.
    Interactivit√© :
        Supporte les clics et les √©v√©nements tactiles (touchstart, touchmove, touchend) pour s√©lectionner les mots.
        Le <select> (id="level") change la taille de la grille ("Facile (8x8)", "Moyen (10x10)", "Difficile (15x15)") et r√©g√©n√®re la grille.
        Le bouton "Recharger" r√©g√©n√®re la grille avec la m√™me taille.
        La modale s‚Äôaffiche lorsque tous les mots sont trouv√©s et peut √™tre ferm√©e.
    Styles g√©n√©raux :
        Polices et couleurs :
            Police : Arial, sans-serif.
            Fond de page : #e0e5ec (gris clair).
            <h1> : Rouge, 2.5rem (desktop), 1.8rem (‚â§768px), 1.4rem (‚â§480px).
            <h2> : Noir, 1.5rem (desktop), 1.1rem (‚â§768px), 0.9rem (‚â§480px).
        Effets visuels :
            Pas d‚Äôombre sur .container.
            Ombres n√©omorphiques sur .cell, .cell.selected, .cell.highlighted, <select>, <button>, .words-list span :
                .cell : box-shadow: 5px 5px 10px #a3b1c6, -5px -5px 10px #ffffff.
                .cell.selected, .cell.highlighted : box-shadow: inset 5px 5px 10px #8a96a8, inset -5px -5px 10px #b8c6e0.
                <select>, <button> : M√™me ombre que .cell au repos, inset lorsqu‚Äôactif.
                .words-list span : M√™me ombre que .cell.
            Modale : Ombre plus prononc√©e (10px 10px 20px #a3b1c6, -10px -10px 20px #ffffff).
        Espacement vertical optimis√© :
            body: padding: 0.5rem.
            header: margin-bottom: 1rem.
            .main-container: gap: 1rem (desktop), gap: 0.5rem (mobile).
            .container: padding: 1rem (desktop), padding: 0.5rem (mobile), margin-bottom: 2rem (mobile).
            .words-list: margin: 1rem, gap: 0.3rem, min-height: 40px.
            .words-list span: margin: 0.2rem, padding: 0.3rem 0.6rem (desktop), 0.2rem 0.5rem (‚â§768px), 0.2rem 0.4rem (‚â§480px).

Exigences sp√©cifiques pour desktop (>768px)

    Boutons :
        .controls-container : flex-direction: column.
        <select> et <button> : width: 100%, avec une largeur √©gale √† celle du mot le plus long dans .words-list (incluant font-size: 0.9rem, padding: 0.3rem 0.6rem, margin: 0.2rem du <span>, plus les paddings des boutons : 0.8rem horizontal).
        Calculer la largeur dynamiquement via JavaScript (par exemple, en mesurant un <span> temporaire avec les styles de .words-list span).
    Grille :
        Cellules : width: 3.5vw, height: 3.5vw, min-width: 30px, min-height: 30px, max-width: 40px, max-height: 40px, font-size: 1rem.
        Espacement : .grid { gap: 0.5rem } (~8px).
        Marge : .grid { margin: 0 } pour √©galiser les distances.
    Distances :
        Distance entre <h2> (sous-titre) et .controls-container = distance entre <h2> et .grid (~2rem, via header { margin-bottom: 1rem } et .main-container { gap: 1rem }).

Exigences sp√©cifiques pour mobile (‚â§768px)

    Boutons :
        .controls-container : flex-direction: row, gap: 0.5rem.
        <select> et <button> : width: calc(50% - 0.5rem), padding: 0.5rem 0.3rem, font-size: 0.9rem.
        Largeur totale de .controls-container (boutons + gap) ‚â§ largeur de .grid (de la lettre la plus √† gauche √† la plus √† droite, incluant les contours des cellules, c‚Äôest-√†-dire .grid.offsetWidth).
        Ajuster la largeur via JavaScript pour correspondre √† .grid.offsetWidth.
    Grille :
        Cellules : width: 8vw, height: 8vw, min-width: 25px, min-height: 25px, max-width: 35px, max-height: 35px, font-size: 0.9rem.
        Espacement : .grid { gap: 0.3rem } (~4.8px) pour rapprocher les lettres.
        Marge : .grid { margin: 1rem 0 } pour espacement vertical.
    Ajustements pour petits √©crans (‚â§480px) :
        Cellules : width: 10vw, height: 10vw, min-width: 20px, min-height: 20px, max-width: 30px, max-height: 30px, font-size: 0.8rem.
        Boutons : padding: 0.4rem 0.2rem, font-size: 0.7rem.
        Mots : .words-list span { font-size: 0.6rem; padding: 0.2rem 0.4rem }.

Exigences suppl√©mentaires

    Liste des mots :
        .words-list : Visible sous la grille, overflow: auto, min-height: 40px, centr√©e (justify-content: center), gap: 0.3rem.
        Chaque mot dans un <span> avec font-size: 0.9rem (desktop), 0.7rem (‚â§768px), 0.6rem (‚â§480px).
        Mots barr√©s (.crossed-out) avec text-decoration: line-through, color: #888.
    <select> :
        Centr√© (text-align: center; text-align-last: center).
        Options : "Facile (8x8)", "Moyen (10x10)", "Difficile (15x15)".
    Responsive :
        Utiliser des media queries pour max-width: 768px et max-width: 480px.
        Assurer que la grille et les boutons restent align√©s et fonctionnels sur toutes tailles d‚Äô√©cran.
    Accessibilit√© :
        Utiliser user-select: none sur .cell pour √©viter la s√©lection de texte.
        Assurer que les √©v√©nements tactiles (touch-action: none sur body et .grid) fonctionnent correctement.
    Gestion des erreurs :
        Si reperes.js √©choue, afficher une alerte et utiliser les mots par d√©faut.
        Si aucun mot n‚Äôest plac√©, afficher une alerte sugg√©rant de recharger.
    Performance :
        Optimiser l‚Äôespace vertical avec des marges/paddings r√©duits.
        √âviter les d√©bordements inutiles (max-width: 1200px pour .main-container, max-width: 600px pour .container).

Livrable

    Un fichier HTML unique contenant :
        HTML avec la structure d√©crite.
        CSS (dans <style>) pour tous les styles et media queries.
        JavaScript (dans <script>) pour la logique de la grille, l‚Äôinteractivit√©, et la gestion des largeurs dynamiques.
    Inclure des commentaires dans le code pour expliquer les sections cl√©s (par exemple, "Calculer la largeur du mot le plus long", "G√©rer les √©v√©nements tactiles").
    Assurer que le code est test√© pour desktop (>768px), mobile (‚â§768px), et petits √©crans (‚â§480px).
